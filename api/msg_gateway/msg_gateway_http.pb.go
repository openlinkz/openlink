// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.15.5
// source: api/msg_gateway/msg_gateway.proto

package msg_gateway

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMsgGatewayServicePushMsg = "/api.msg.gateway.MsgGatewayService/PushMsg"

type MsgGatewayServiceHTTPServer interface {
	PushMsg(context.Context, *PushMsgReq) (*PushMsgReply, error)
}

func RegisterMsgGatewayServiceHTTPServer(s *http.Server, srv MsgGatewayServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/gateway/push_msg", _MsgGatewayService_PushMsg0_HTTP_Handler(srv))
}

func _MsgGatewayService_PushMsg0_HTTP_Handler(srv MsgGatewayServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushMsgReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgGatewayServicePushMsg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushMsg(ctx, req.(*PushMsgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushMsgReply)
		return ctx.Result(200, reply)
	}
}

type MsgGatewayServiceHTTPClient interface {
	PushMsg(ctx context.Context, req *PushMsgReq, opts ...http.CallOption) (rsp *PushMsgReply, err error)
}

type MsgGatewayServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMsgGatewayServiceHTTPClient(client *http.Client) MsgGatewayServiceHTTPClient {
	return &MsgGatewayServiceHTTPClientImpl{client}
}

func (c *MsgGatewayServiceHTTPClientImpl) PushMsg(ctx context.Context, in *PushMsgReq, opts ...http.CallOption) (*PushMsgReply, error) {
	var out PushMsgReply
	pattern := "/gateway/push_msg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMsgGatewayServicePushMsg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
