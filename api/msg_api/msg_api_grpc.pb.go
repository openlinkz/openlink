// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: api/msg_api/msg_api.proto

package msg_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgAPIServiceClient is the client API for MsgAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgAPIServiceClient interface {
	Push(ctx context.Context, in *BizMsg, opts ...grpc.CallOption) (*PushBizMsgReply, error)
}

type msgAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgAPIServiceClient(cc grpc.ClientConnInterface) MsgAPIServiceClient {
	return &msgAPIServiceClient{cc}
}

func (c *msgAPIServiceClient) Push(ctx context.Context, in *BizMsg, opts ...grpc.CallOption) (*PushBizMsgReply, error) {
	out := new(PushBizMsgReply)
	err := c.cc.Invoke(ctx, "/msg.api.MsgAPIService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgAPIServiceServer is the server API for MsgAPIService service.
// All implementations must embed UnimplementedMsgAPIServiceServer
// for forward compatibility
type MsgAPIServiceServer interface {
	Push(context.Context, *BizMsg) (*PushBizMsgReply, error)
	mustEmbedUnimplementedMsgAPIServiceServer()
}

// UnimplementedMsgAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgAPIServiceServer struct {
}

func (UnimplementedMsgAPIServiceServer) Push(context.Context, *BizMsg) (*PushBizMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedMsgAPIServiceServer) mustEmbedUnimplementedMsgAPIServiceServer() {}

// UnsafeMsgAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgAPIServiceServer will
// result in compilation errors.
type UnsafeMsgAPIServiceServer interface {
	mustEmbedUnimplementedMsgAPIServiceServer()
}

func RegisterMsgAPIServiceServer(s grpc.ServiceRegistrar, srv MsgAPIServiceServer) {
	s.RegisterService(&MsgAPIService_ServiceDesc, srv)
}

func _MsgAPIService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgAPIServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.api.MsgAPIService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgAPIServiceServer).Push(ctx, req.(*BizMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgAPIService_ServiceDesc is the grpc.ServiceDesc for MsgAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.api.MsgAPIService",
	HandlerType: (*MsgAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _MsgAPIService_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msg_api/msg_api.proto",
}
