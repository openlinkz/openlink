// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: api/msg-api/msg_exchange.proto

package msg_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgExchangeServiceClient is the client API for MsgExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgExchangeServiceClient interface {
	SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*SendMsgReply, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error)
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error)
}

type msgExchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgExchangeServiceClient(cc grpc.ClientConnInterface) MsgExchangeServiceClient {
	return &msgExchangeServiceClient{cc}
}

func (c *msgExchangeServiceClient) SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*SendMsgReply, error) {
	out := new(SendMsgReply)
	err := c.cc.Invoke(ctx, "/msg.api.MsgExchangeService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgExchangeServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/msg.api.MsgExchangeService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgExchangeServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectReply, error) {
	out := new(DisconnectReply)
	err := c.cc.Invoke(ctx, "/msg.api.MsgExchangeService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgExchangeServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error) {
	out := new(KeepAliveReply)
	err := c.cc.Invoke(ctx, "/msg.api.MsgExchangeService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgExchangeServiceServer is the server API for MsgExchangeService service.
// All implementations must embed UnimplementedMsgExchangeServiceServer
// for forward compatibility
type MsgExchangeServiceServer interface {
	SendMsg(context.Context, *Msg) (*SendMsgReply, error)
	Connect(context.Context, *ConnectRequest) (*ConnectReply, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error)
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error)
	mustEmbedUnimplementedMsgExchangeServiceServer()
}

// UnimplementedMsgExchangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMsgExchangeServiceServer struct {
}

func (UnimplementedMsgExchangeServiceServer) SendMsg(context.Context, *Msg) (*SendMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedMsgExchangeServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMsgExchangeServiceServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedMsgExchangeServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedMsgExchangeServiceServer) mustEmbedUnimplementedMsgExchangeServiceServer() {}

// UnsafeMsgExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgExchangeServiceServer will
// result in compilation errors.
type UnsafeMsgExchangeServiceServer interface {
	mustEmbedUnimplementedMsgExchangeServiceServer()
}

func RegisterMsgExchangeServiceServer(s grpc.ServiceRegistrar, srv MsgExchangeServiceServer) {
	s.RegisterService(&MsgExchangeService_ServiceDesc, srv)
}

func _MsgExchangeService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgExchangeServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.api.MsgExchangeService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgExchangeServiceServer).SendMsg(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgExchangeService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgExchangeServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.api.MsgExchangeService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgExchangeServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgExchangeService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgExchangeServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.api.MsgExchangeService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgExchangeServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgExchangeService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgExchangeServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.api.MsgExchangeService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgExchangeServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgExchangeService_ServiceDesc is the grpc.ServiceDesc for MsgExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.api.MsgExchangeService",
	HandlerType: (*MsgExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _MsgExchangeService_SendMsg_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _MsgExchangeService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _MsgExchangeService_Disconnect_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _MsgExchangeService_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msg-api/msg_exchange.proto",
}
